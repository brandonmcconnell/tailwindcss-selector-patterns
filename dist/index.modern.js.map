{"version":3,"file":"index.modern.js","sources":["../index.ts"],"sourcesContent":["import plugin from 'tailwindcss/plugin';\n\nexport default plugin(({ matchVariant }) => {\n  matchVariant('pattern', (pattern_selector) => {\n    const [pattern, selector = '*', extraneous] = pattern_selector.split(';').map((str) => str.trim());\n    const optionalSelector = selector === '*' ? '' : selector;\n    if (extraneous)\n      throw new Error(\n        `Found more than 2 semicolon-delimited (;) arguments in Tailwind CSS selector pattern '${pattern_selector}'`\n      );\n\n    const combinator = pattern[0];\n    const validCombinatorSymbols = ['+', '-', '%', '>', '<', '^'];\n    if (!validCombinatorSymbols.includes(combinator))\n      throw new Error(\n        `Combinator used '${combinator}' in Tailwind CSS selector pattern '${pattern_selector}' is not one of the valid combinators: ${validCombinatorSymbols.join(\n          ', '\n        )}`\n      );\n\n    const isDoubleCombinator = pattern[1] === combinator;\n    if (!isDoubleCombinator && validCombinatorSymbols.includes(pattern[1]))\n      throw new Error(\n        `Second character in Tailwind CSS selector pattern '${pattern_selector}' ('${pattern[1]}') is a valid combinator but does not match the first combinator used ('${combinator}')`\n      );\n\n    const nthIndex_dir = isDoubleCombinator ? pattern.slice(2) : pattern.slice(1);\n    if (isDoubleCombinator && nthIndex_dir)\n      throw new Error(\n        `Double combinator '${combinator.repeat(\n          2\n        )}' in Tailwind CSS selector pattern '${pattern_selector}' can only be followed by an optional selector argument, delimited by a semicolon; instead found '${nthIndex_dir}'`\n      );\n\n    const validDirSymbols = ['<', '>'];\n    const hasDir = !isDoubleCombinator && validDirSymbols.includes(nthIndex_dir.slice(-1));\n    const [_nthIndex = '1', dir] = !isDoubleCombinator\n      ? hasDir\n        ? [nthIndex_dir.slice(0, -1), nthIndex_dir.slice(-1)]\n        : nthIndex_dir\n          ? [nthIndex_dir]\n          : []\n      : [];\n\n    const nthIndex = Number(_nthIndex);\n    console.log({\n      pattern,\n      hasDir,\n      _nthIndex,\n      dir,\n      nthIndex,\n    });\n    if (!Number.isFinite(nthIndex))\n      throw new Error(`Invalid nth-index value '${_nthIndex}' in Tailwind CSS selector pattern '${pattern_selector}'`);\n    if (!(nthIndex > 0))\n      throw new Error(\n        `nth-index value '${nthIndex}' in Tailwind CSS selector pattern '${pattern_selector}' must be greater than 0`\n      );\n\n    let result = '';\n\n    if (combinator === '+' || combinator === '%') {\n      if (isDoubleCombinator) {\n        result += `& ~ ${selector}`;\n      } else if (!dir) {\n        result += `& + ${'* + '.repeat(nthIndex - 1)}${selector}`;\n      } else if (dir === '<') {\n        result += [...Array(nthIndex)].map((_, i) => `& + ${'* + '.repeat(i)}${selector}`).join(', ');\n      } else if (dir === '>') {\n        result += `& ${'+ * '.repeat(nthIndex - 1)}~ ${selector}`;\n      }\n    }\n    if (combinator === '%') result += `, `;\n    if (combinator === '-' || combinator === '%') {\n      if (isDoubleCombinator) {\n        result += `${optionalSelector}:has(~ &)`;\n      } else if (!dir) {\n        result += `${optionalSelector}:has(${'+ * '.repeat(nthIndex - 1)}+ &)`;\n      } else if (dir === '<') {\n        result += `${optionalSelector}:has(${[...Array(nthIndex)].map((_, i) => `+ ${'* + '.repeat(i)}&`).join(', ')})`;\n      } else if (dir === '>') {\n        result += `${optionalSelector}:has(~${' * +'.repeat(nthIndex - 1)} &)`;\n      }\n    }\n    if (combinator === '>' || combinator === '^') {\n      if (isDoubleCombinator) {\n        result += `& ${selector}`;\n      } else if (!dir) {\n        result += `& ${'> * '.repeat(nthIndex - 1)}> ${selector}`;\n      } else if (dir === '<') {\n        result += [...Array(nthIndex)].map((_, i) => `& > ${'* > '.repeat(i)}${selector}`).join(', ');\n      } else if (dir === '>') {\n        result += `& ${'> * '.repeat(nthIndex - 1)}${selector}`;\n      }\n    }\n    if (combinator === '^') result += `, `;\n    if (combinator === '<' || combinator === '^') {\n      if (isDoubleCombinator) {\n        result += `${optionalSelector}:has(&)`;\n      } else if (!dir) {\n        result += `${optionalSelector}:has(${'> * '.repeat(nthIndex - 1)}> &)`;\n      } else if (dir === '<') {\n        result += `${optionalSelector}:has(${[...Array(nthIndex)].map((_, i) => `${'> * '.repeat(i)}> &`).join(', ')})`;\n      } else if (dir === '>') {\n        result += `${optionalSelector}:has(${'* > '.repeat(nthIndex - 1)}&)`;\n      }\n    }\n    return `:is(${result})`;\n  });\n});\n"],"names":["plugin","matchVariant","pattern_selector","pattern","selector","extraneous","split","map","str","trim","optionalSelector","Error","combinator","validCombinatorSymbols","includes","join","isDoubleCombinator","nthIndex_dir","slice","repeat","hasDir","_nthIndex","dir","nthIndex","Number","console","log","isFinite","result","Array","_","i"],"mappings":"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"}