{"version":3,"file":"index.module.js","sources":["../index.ts"],"sourcesContent":["import plugin from 'tailwindcss/plugin';\n\nmodule.exports = plugin(({ matchVariant }) => {\n  matchVariant('pattern', (pattern_selector) => {\n    const [pattern, selector = '*', extraneous] = pattern_selector.split(';').map((str) => str.trim());\n    const optionalSelector = selector === '*' ? '' : selector;\n    if (extraneous)\n      throw new Error(\n        `Found more than 2 semicolon-delimited (;) arguments in Tailwind CSS selector pattern '${pattern_selector}'`\n      );\n\n    const combinator = pattern[0];\n    const validCombinatorSymbols = ['+', '-', '%', '>', '<', '^'];\n    if (!validCombinatorSymbols.includes(combinator))\n      throw new Error(\n        `Combinator used '${combinator}' in Tailwind CSS selector pattern '${pattern_selector}' is not one of the valid combinators: ${validCombinatorSymbols.join(\n          ', '\n        )}`\n      );\n\n    const isDoubleCombinator = pattern[1] === combinator;\n    if (!isDoubleCombinator && validCombinatorSymbols.includes(pattern[1]))\n      throw new Error(\n        `Second character in Tailwind CSS selector pattern '${pattern_selector}' ('${pattern[1]}') is a valid combinator but does not match the first combinator used ('${combinator}')`\n      );\n\n    const nthIndex_dir = isDoubleCombinator ? pattern.slice(2) : pattern.slice(1);\n    if (isDoubleCombinator && nthIndex_dir)\n      throw new Error(\n        `Double combinator '${combinator.repeat(\n          2\n        )}' in Tailwind CSS selector pattern '${pattern_selector}' can only be followed by an optional selector argument, delimited by a semicolon; instead found '${nthIndex_dir}'`\n      );\n\n    const validDirSymbols = ['<', '>'];\n    const hasDir = !isDoubleCombinator && validDirSymbols.includes(nthIndex_dir.slice(-1));\n    const [_nthIndex = '1', dir] = !isDoubleCombinator\n      ? hasDir\n        ? [nthIndex_dir.slice(0, -1), nthIndex_dir.slice(-1)]\n        : nthIndex_dir\n          ? [nthIndex_dir]\n          : []\n      : [];\n\n    const nthIndex = Number(_nthIndex);\n    console.log({\n      pattern,\n      hasDir,\n      _nthIndex,\n      dir,\n      nthIndex,\n    });\n    if (!Number.isFinite(nthIndex))\n      throw new Error(`Invalid nth-index value '${_nthIndex}' in Tailwind CSS selector pattern '${pattern_selector}'`);\n    if (!(nthIndex > 0))\n      throw new Error(\n        `nth-index value '${nthIndex}' in Tailwind CSS selector pattern '${pattern_selector}' must be greater than 0`\n      );\n\n    let result = '';\n\n    if (combinator === '+' || combinator === '%') {\n      if (isDoubleCombinator) {\n        result += `& ~ ${selector}`;\n      } else if (!dir) {\n        result += `& + ${'* + '.repeat(nthIndex - 1)}${selector}`;\n      } else if (dir === '<') {\n        result += [...Array(nthIndex)].map((_, i) => `& + ${'* + '.repeat(i)}${selector}`).join(', ');\n      } else if (dir === '>') {\n        result += `& ${'+ * '.repeat(nthIndex - 1)}~ ${selector}`;\n      }\n    }\n    if (combinator === '%') result += `, `;\n    if (combinator === '-' || combinator === '%') {\n      if (isDoubleCombinator) {\n        result += `${optionalSelector}:has(~ &)`;\n      } else if (!dir) {\n        result += `${optionalSelector}:has(${'+ * '.repeat(nthIndex - 1)}+ &)`;\n      } else if (dir === '<') {\n        result += `${optionalSelector}:has(${[...Array(nthIndex)].map((_, i) => `+ ${'* + '.repeat(i)}&`).join(', ')})`;\n      } else if (dir === '>') {\n        result += `${optionalSelector}:has(~${' * +'.repeat(nthIndex - 1)} &)`;\n      }\n    }\n    if (combinator === '>' || combinator === '^') {\n      if (isDoubleCombinator) {\n        result += `& ${selector}`;\n      } else if (!dir) {\n        result += `& ${'> * '.repeat(nthIndex - 1)}> ${selector}`;\n      } else if (dir === '<') {\n        result += [...Array(nthIndex)].map((_, i) => `& > ${'* > '.repeat(i)}${selector}`).join(', ');\n      } else if (dir === '>') {\n        result += `& ${'> * '.repeat(nthIndex - 1)}${selector}`;\n      }\n    }\n    if (combinator === '^') result += `, `;\n    if (combinator === '<' || combinator === '^') {\n      if (isDoubleCombinator) {\n        result += `${optionalSelector}:has(&)`;\n      } else if (!dir) {\n        result += `${optionalSelector}:has(${'> * '.repeat(nthIndex - 1)}> &)`;\n      } else if (dir === '<') {\n        result += `${optionalSelector}:has(${[...Array(nthIndex)].map((_, i) => `${'> * '.repeat(i)}> &`).join(', ')})`;\n      } else if (dir === '>') {\n        result += `${optionalSelector}:has(${'* > '.repeat(nthIndex - 1)}&)`;\n      }\n    }\n    return `:is(${result})`;\n  });\n});\n"],"names":["module","exports","plugin","_ref","matchVariant","pattern_selector","_pattern_selector$spl","split","map","str","trim","pattern","_pattern_selector$spl2","selector","optionalSelector","Error","combinator","validCombinatorSymbols","includes","join","isDoubleCombinator","nthIndex_dir","slice","repeat","hasDir","_ref2","_ref2$","_nthIndex","dir","nthIndex","Number","console","log","isFinite","result","concat","Array","_","i"],"mappings":"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"}