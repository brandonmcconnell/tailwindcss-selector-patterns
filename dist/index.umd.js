!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(require("tailwindcss/plugin")):"function"==typeof define&&define.amd?define(["tailwindcss/plugin"],n):n((e||self).plugin)}(this,function(e){function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}module.exports=/*#__PURE__*/n(e).default(function(e){(0,e.matchVariant)("pattern",function(e){var n=e.split(";").map(function(e){return e.trim()}),t=n[0],r=n[1],i=void 0===r?"*":r,a="*"===i?"":i;if(n[2])throw new Error("Found more than 2 semicolon-delimited (;) arguments in Tailwind CSS selector pattern '"+e+"'");var o=t[0],l=["+","-","%",">","<","^"];if(!l.includes(o))throw new Error("Combinator used '"+o+"' in Tailwind CSS selector pattern '"+e+"' is not one of the valid combinators: "+l.join(", "));var c=t[1]===o;if(!c&&l.includes(t[1]))throw new Error("Second character in Tailwind CSS selector pattern '"+e+"' ('"+t[1]+"') is a valid combinator but does not match the first combinator used ('"+o+"')");var s=t.slice(c?2:1);if(c&&s)throw new Error("Double combinator '"+o.repeat(2)+"' in Tailwind CSS selector pattern '"+e+"' can only be followed by an optional selector argument, delimited by a semicolon; instead found '"+s+"'");var d=!c&&["<",">"].includes(s.slice(-1)),u=c?[]:d?[s.slice(0,-1),s.slice(-1)]:s?[s]:[],p=u[0],f=void 0===p?"1":p,h=u[1],m=Number(f);if(console.log({pattern:t,hasDir:d,_nthIndex:f,dir:h,nthIndex:m}),!Number.isFinite(m))throw new Error("Invalid nth-index value '"+f+"' in Tailwind CSS selector pattern '"+e+"'");if(!(m>0))throw new Error("nth-index value '"+m+"' in Tailwind CSS selector pattern '"+e+"' must be greater than 0");var w="";return"+"!==o&&"%"!==o||(c?w+="& ~ "+i:h?"<"===h?w+=[].concat(Array(m)).map(function(e,n){return"& + "+"* + ".repeat(n)+i}).join(", "):">"===h&&(w+="& "+"+ * ".repeat(m-1)+"~ "+i):w+="& + "+"* + ".repeat(m-1)+i),"%"===o&&(w+=", "),"-"!==o&&"%"!==o||(c?w+=a+":has(~ &)":h?"<"===h?w+=a+":has("+[].concat(Array(m)).map(function(e,n){return"+ "+"* + ".repeat(n)+"&"}).join(", ")+")":">"===h&&(w+=a+":has(~"+" * +".repeat(m-1)+" &)"):w+=a+":has("+"+ * ".repeat(m-1)+"+ &)"),">"!==o&&"^"!==o||(c?w+="& "+i:h?"<"===h?w+=[].concat(Array(m)).map(function(e,n){return"& > "+"* > ".repeat(n)+i}).join(", "):">"===h&&(w+="& "+"> * ".repeat(m-1)+i):w+="& "+"> * ".repeat(m-1)+"> "+i),"^"===o&&(w+=", "),"<"!==o&&"^"!==o||(c?w+=a+":has(&)":h?"<"===h?w+=a+":has("+[].concat(Array(m)).map(function(e,n){return"> * ".repeat(n)+"> &"}).join(", ")+")":">"===h&&(w+=a+":has("+"* > ".repeat(m-1)+"&)"):w+=a+":has("+"> * ".repeat(m-1)+"> &)"),":is("+w+")"})})});
//# sourceMappingURL=index.umd.js.map
