import e from"tailwindcss/plugin";var r=e(({matchVariant:e})=>{e("pattern",e=>{const[r,t="*",a]=e.split(";").map(e=>e.trim()),n="*"===t?"":t;if(a)throw new Error(`Found more than 2 semicolon-delimited (;) arguments in Tailwind CSS selector pattern '${e}'`);const i=r[0],o=["+","-","%",">","<","^"];if(!o.includes(i))throw new Error(`Combinator used '${i}' in Tailwind CSS selector pattern '${e}' is not one of the valid combinators: ${o.join(", ")}`);const s=r[1]===i;if(!s&&o.includes(r[1]))throw new Error(`Second character in Tailwind CSS selector pattern '${e}' ('${r[1]}') is a valid combinator but does not match the first combinator used ('${i}')`);const $=r.slice(s?2:1);if(s&&$)throw new Error(`Double combinator '${i.repeat(2)}' in Tailwind CSS selector pattern '${e}' can only be followed by an optional selector argument, delimited by a semicolon; instead found '${$}'`);const l=!s&&["<",">"].includes($.slice(-1)),[c="1",d]=s?[]:l?[$.slice(0,-1),$.slice(-1)]:$?[$]:[],p=Number(c);if(console.log({pattern:r,hasDir:l,_nthIndex:c,dir:d,nthIndex:p}),!Number.isFinite(p))throw new Error(`Invalid nth-index value '${c}' in Tailwind CSS selector pattern '${e}'`);if(!(p>0))throw new Error(`nth-index value '${p}' in Tailwind CSS selector pattern '${e}' must be greater than 0`);let h="";return"+"!==i&&"%"!==i||(s?h+=`& ~ ${t}`:d?"<"===d?h+=[...Array(p)].map((e,r)=>`& + ${"* + ".repeat(r)}${t}`).join(", "):">"===d&&(h+=`& ${"+ * ".repeat(p-1)}~ ${t}`):h+=`& + ${"* + ".repeat(p-1)}${t}`),"%"===i&&(h+=", "),"-"!==i&&"%"!==i||(s?h+=`${n}:has(~ &)`:d?"<"===d?h+=`${n}:has(${[...Array(p)].map((e,r)=>`+ ${"* + ".repeat(r)}&`).join(", ")})`:">"===d&&(h+=`${n}:has(~${" * +".repeat(p-1)} &)`):h+=`${n}:has(${"+ * ".repeat(p-1)}+ &)`),">"!==i&&"^"!==i||(s?h+=`& ${t}`:d?"<"===d?h+=[...Array(p)].map((e,r)=>`& > ${"* > ".repeat(r)}${t}`).join(", "):">"===d&&(h+=`& ${"> * ".repeat(p-1)}${t}`):h+=`& ${"> * ".repeat(p-1)}> ${t}`),"^"===i&&(h+=", "),"<"!==i&&"^"!==i||(s?h+=`${n}:has(&)`:d?"<"===d?h+=`${n}:has(${[...Array(p)].map((e,r)=>`${"> * ".repeat(r)}> &`).join(", ")})`:">"===d&&(h+=`${n}:has(${"* > ".repeat(p-1)}&)`):h+=`${n}:has(${"> * ".repeat(p-1)}> &)`),`:is(${h})`})});export{r as default};
//# sourceMappingURL=index.modern.js.map
